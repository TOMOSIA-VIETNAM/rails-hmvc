export default {
  navigation: {
    documentation: 'ドキュメント',
    version: 'v1.0.0',
    contact: 'お問い合わせ'
  },
  hero: {
    title: "Tomosia's Ruby",
    header: {
      title: 'ハイレベルMVC',
      subtitle: 'ビジネスロジックの簡素化と高速開発'
    },
    painPoints: {
      p1: 'コードがごちゃごちゃしていて、整理が難しいですか？',
      p2: 'エラーループを自動的に防ぐRailwayパターン',
      p3: '概念優先の組織化で配置の推測が不要になります'
    }
  },
  knowledgeBanner: {
    heading: 'Railsスーパーヒーローモード：起動！',
    description: '複数のフレームワークを扱う必要はありません。Railsニンジャになりましょう！',
    highlight: '全てを支配する1つのフレームワーク、1つのHMVCがそれらを見つける',
    installButton: 'スーパーパワーを手に入れよう！⚡️',
    demoButton: 'デモを見る'
  },
  architecture: {
    heading: 'アーキテクチャの極み',
    subheading: 'MVC：次世代へ',
    description: '革命ではなく進化 - 私たちは物事を壊すのではなく、より良くするのです！'
  },
  reasonRefactor: {
    whyChoose: 'なぜHMVCを<br />選ぶのか',
    heading: {
      main: '明確性のためのリファクタリング',
      sub: '技術的負債の軽減'
    },
    blocks: {
      missingAbstractions: {
        title: '抽象化の欠如',
        description: 'Webフレームワークはルーティングとレンダリングに優れていますが、ビジネスロジックの構造化では不十分です。明確な抽象化がないと、コードは複雑になり、保守が困難になります。'
      },
      solution: {
        title: '私たちのソリューション',
        description: 'HMVCは「オペレーション」という抽象化を導入し、ロジックを明確なステップに分割します。これにより、フロー制御が改善され、保守性が向上し、複雑なプロセスがより管理しやすくなります。'
      },
      conventions: {
        title: '堅固な規約',
        description: 'Railwayパターンにより、HMVCはエラー処理を効率化し、過剰な条件分岐を最小限に抑え、継承とコンポジションによるコードの再利用性を高めます—より清潔で効率的な開発を実現します。'
      }
    },
    videoTour: 'ビデオツアーを見る'
  },
  ownerSay: {
    title: '魔法の背後にいる魔法使いたち ✨',
    founder: {
      name: 'アイン・グエン氏',
      position: 'CTO、HMVC創設者',
      quote: '大規模アプリケーションに内在する複雑さの問題を解決するビジョンを持ってHMVCを作りました。従来のMVCパターンに階層構造を導入することで、フレームワークに依存しないアプローチを確立し、複雑なコードベースに明確性と保守性をもたらしました。このアーキテクチャが多くのチームの技術的負債を削減し、より持続可能なアプリケーションの構築に役立っているのを見るのは非常に嬉しいことです。'
    },
    maintainer: {
      name: 'ミン・タン氏',
      position: 'リードアーキテクト、HMVCメンテナー',
      quote: '基本原則を踏まえ、私は今日の開発課題に対応する強力でモダンなアーキテクチャへと進化させてきました。明確な抽象化と保守可能なパターンを通じて、私は開発者体験の向上に焦点を当ててきました。このアーキテクチャの柔軟性により、チームは既存のプロジェクトで段階的に採用することができ、新規開発とレガシーシステムの近代化の両方に理想的なソリューションとなっています。'
    }
  },
  enhancedSlider: {
    slides: {
      mvcVsHmvc: {
        title: 'MVC と HMVC の複雑性',
        description: 'コードベースのサイズとメンテナンスの複雑さの関係を視覚化します。従来のRailsがプロジェクトの規模拡大に伴い指数関数的に複雑さが増加するのに対し、HMVCは構造化された組織と明確な境界を通じて線形の複雑さを維持します。このアーキテクチャアプローチにより、小規模から大規模まで持続可能な開発が確保されます。'
      },
      overviewLayer: {
        title: 'レイヤー概要',
        description: 'リクエストからレスポンスまでのビジネスフローを効率化する戦略的なレイヤードアーキテクチャ。各レイヤーは、リクエスト処理、認可、バリデーション、ビジネスロジックの実行、データ永続化まで、それぞれ明確な責任を持ちます。この分離により、クリーンなテスト、保守可能なコード、レイヤー間のバグ防止を実現し、ビジネスロジックに集中できます。'
      },
      flowControl: {
        title: 'フロー制御',
        description: '異なるモードでクエリを実行し、ローカル履歴で全ての活動を追跡することで、作業の損失を防ぎます。'
      },
      structureProject: {
        title: 'プロジェクト構造',
        description: 'HMVCはプロジェクトを明確なモジュラーコンポーネントに整理します。コア構造には、ルーティング用のコントローラー、ビジネスワークフロー用のオペレーション、バリデーション用のフォーム、データ管理用のモデル、認可用のポリシーが含まれます。このモジュラーアプローチにより、並行開発、容易なテスト、プロジェクトの成長に合わせて拡張可能な保守可能なコード組織が可能になります。'
      }
    }
  },
  abstractionLayer: {
    title: '抽象化レイヤー',
    mission: 'コアミッション：ソフトウェアの長期的な持続可能性を確保',
    description: [
      '持続可能で保守可能なソフトウェアアーキテクチャを実現する',
      '最新の抽象化レイヤーの戦略的な実装を通じて。'
    ],
    sections: {
      slimController: {
        title: 'スリムコントローラー',
        description: [
          'コントローラーはHTTPリクエストとルーティングに専念し、クリーンで効率的です。',
          'すべてのビジネスロジックを専門のOperationsに委譲することで、明確な責任の境界を維持し、コードの保守性を向上させます。'
        ]
      },
      domainModel: {
        title: 'ドメインモデル',
        description: [
          'モデルはデータ関係とデータベース操作に特化し、その中核的な強みを発揮します。',
          'ビジネスロジックとバリデーションの懸念を取り除くことで、モデルはより焦点を絞り、保守可能になり、チームのコラボレーションとスケーラビリティを促進します。'
        ]
      },
      validation: {
        title: 'スマートバリデーション',
        description: [
          '専用のフォームオブジェクトがすべてのデータバリデーションを処理し、バリデーションルールとビジネスロジックの間に明確な分離を作ります。',
          'この積極的なアプローチは、リクエストサイクルの早い段階でデータの整合性を確保し、無効なデータがコアビジネス操作を損なうのを防ぎ、システムの信頼性を向上させます。'
        ]
      },
      operation: {
        title: 'ビジネスロジック',
        description: [
          'オペレーションは、複雑なビジネスプロセスを明確で順序立てたステップに分解し、指揮者として機能します。',
          '各オペレーションは特定のワークフローをカプセル化し、コードをよりテストしやすく、保守しやすくし、アプリケーションの成長に伴って理解しやすくします。'
        ]
      }
    },
    cta: {
      ready: 'Railsアーキテクチャを次のレベルへ？',
      getStarted: 'HMVCを始めましょう'
    }
  },
  common: {
    loading: '読み込み中...',
    error: 'エラーが発生しました',
    backToTop: 'トップへ戻る'
  },
  footer: {
    brand: {
      description: 'TOMOSIAは、様々な情報技術を持つ才能あるエンジニアの集まりです。\n個々の知識と経験、そしてチーム、さらに組織学習としてそれぞれが持つ能力を活かして、お客様が抱えるIT課題に対して最適な解決方法を導き出すことを使命と考えています。'
    },
    quickLinks: {
      title: 'クイックリンク',
      about: '事業内容',
      company: '会社概要',
      projects: '実績',
      process: 'ご依頼の流れ'
    },
    contact: {
      title: '連絡先',
      mainOffice: '本社　2F, Au Viet Building, No.1 Le Duc Tho Street, Mai Dich Ward, Cau Giay, Ha Noi',
      branchOffice: '支社　5F, Lighthouse Building, No.192 Xo Viet Nghe Tinh Street, Hoa Cuong, Hai Chau, Da Nang',
      phone: '(+84) 243-201-6955'
    },
    copyright: '{year}年から開発',
    developedBy: 'RUBY チームによって開発 <a href="https://tomosia.com" target="_blank" class="text-decoration-none">TOMOSIA VIETNAM</a>'
  }
}

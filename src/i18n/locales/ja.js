export default {
  navigation: {
    documentation: 'ドキュメント',
    version: 'v1.0.0',
    contact: 'お問い合わせ'
  },
  hero: {
    title: "Tomosia's Ruby",
    header: {
      title: 'ハイレベルMVC',
      subtitle: 'ビジネスロジックの簡素化と迅速なアプリケーション開発',
      installButton: '無料でインストール',
      description: 'オープンソースライブラリ <br /> 一緒により良いものを作りましょう'
    }
  },
  knowledgeBanner: {
    heading: 'Railsスーパーヒーローモード：起動！',
    description: '複数のフレームワークを扱う必要はありません。Railsニンジャになりましょう！',
    highlight: '全てを支配する1つのフレームワーク、1つのHMVCがそれらを見つける',
    installButton: '無料でインストール',
    demoButton: 'デモを見る'
  },
  architecture: {
    heading: 'アーキテクチャの極み',
    subheading: 'MVC：次世代へ',
    description: '革命ではなく進化 - 私たちは物事を壊すのではなく、より良くするのです！'
  },
  reasonRefactor: {
    whyChoose: 'なぜHMVCを<br />選ぶのか',
    heading: {
      main: '明確性のためのリファクタリング',
      sub: '技術的負債の軽減'
    },
    blocks: {
      missingAbstractions: {
        title: '抽象化の欠如',
        description: 'Webフレームワークはルーティングとレンダリングに優れていますが、ビジネスロジックの構造化では不十分です。明確な抽象化がないと、コードは複雑になり、保守が困難になります。'
      },
      solution: {
        title: '私たちのソリューション',
        description: 'HMVCは「オペレーション」という抽象化を導入し、ロジックを明確なステップに分割します。これにより、フロー制御が改善され、保守性が向上し、複雑なプロセスがより管理しやすくなります。'
      },
      conventions: {
        title: '堅固な規約',
        description: 'Railwayパターンにより、HMVCはエラー処理を効率化し、過剰な条件分岐を最小限に抑え、継承とコンポジションによるコードの再利用性を高めます—より清潔で効率的な開発を実現します。'
      }
    },
    videoTour: 'ビデオツアーを見る'
  },
  ownerSay: {
    title: '魔法の背後にいる魔法使いたち ✨',
    founder: {
      name: 'アイン・グエン氏',
      position: 'CTO、HMVC創設者',
      quote: '大規模アプリケーションに内在する複雑さの問題を解決するビジョンを持ってHMVCを作りました。従来のMVCパターンに階層構造を導入することで、フレームワークに依存しないアプローチを確立し、複雑なコードベースに明確性と保守性をもたらしました。このアーキテクチャが多くのチームの技術的負債を削減し、より持続可能なアプリケーションの構築に役立っているのを見るのは非常に嬉しいことです。'
    },
    maintainer: {
      name: 'ミン・タン氏',
      position: 'リードアーキテクト、HMVCメンテナー',
      quote: '基本原則を踏まえ、私は今日の開発課題に対応する強力でモダンなアーキテクチャへと進化させてきました。明確な抽象化と保守可能なパターンを通じて、私は開発者体験の向上に焦点を当ててきました。このアーキテクチャの柔軟性により、チームは既存のプロジェクトで段階的に採用することができ、新規開発とレガシーシステムの近代化の両方に理想的なソリューションとなっています。'
    }
  },
  enhancedSlider: {
    slides: {
      mvcVsHmvc: {
        title: 'MVC と HMVC の複雑性',
        description: 'コードベースのサイズとメンテナンスの複雑さの関係を視覚化します。従来のRailsがプロジェクトの規模拡大に伴い指数関数的に複雑さが増加するのに対し、HMVCは構造化された組織と明確な境界を通じて線形の複雑さを維持します。このアーキテクチャアプローチにより、小規模から大規模まで持続可能な開発が確保されます。'
      },
      overviewLayer: {
        title: 'レイヤー概要',
        description: 'リクエストからレスポンスまでのビジネスフローを効率化する戦略的なレイヤードアーキテクチャ。各レイヤーは、リクエスト処理、認可、バリデーション、ビジネスロジックの実行、データ永続化まで、それぞれ明確な責任を持ちます。この分離により、クリーンなテスト、保守可能なコード、レイヤー間のバグ防止を実現し、ビジネスロジックに集中できます。'
      },
      flowControl: {
        title: 'フロー制御',
        description: '異なるモードでクエリを実行し、ローカル履歴で全ての活動を追跡することで、作業の損失を防ぎます。'
      },
      structureProject: {
        title: 'プロジェクト構造',
        description: 'HMVCはプロジェクトを明確なモジュラーコンポーネントに整理します。コア構造には、ルーティング用のコントローラー、ビジネスワークフロー用のオペレーション、バリデーション用のフォーム、データ管理用のモデル、認可用のポリシーが含まれます。このモジュラーアプローチにより、並行開発、容易なテスト、プロジェクトの成長に合わせて拡張可能な保守可能なコード組織が可能になります。'
      }
    }
  },
  abstractionLayer: {
    title: '抽象化レイヤー',
    mission: 'コアミッション：ソフトウェアの長期的な持続可能性を確保',
    description: [
      '持続可能で保守可能なソフトウェアアーキテクチャを実現する',
      '最新の抽象化レイヤーの戦略的な実装を通じて。'
    ],
    sections: {
      slimController: {
        title: 'スリムコントローラー',
        description: [
          'ビジネスロジックを完全に削除してコントローラーを効率化します。',
          '現代のコントローラーは、トラフィックディレクターとして機能し、HTTPリクエストを処理し、ルーティングを管理し、専門のOperationsに処理を委譲します。この分離により、クリーンで保守可能なコードと明確な責任境界が確保されます。'
        ]
      },
      domainModel: {
        title: 'ドメインモデルの卓越性',
        description: [
          'モデルを、データ関係とデータベース操作の管理という中核的な目的に特化したドメインエンティティに変換します。ビジネスロジックとバリデーションの懸念を取り除くことで、モデルはより保守可能でスケーラブルになります。このアプローチにより、コードの組織化が向上し、チームのコラボレーションが強化されます。'
        ]
      },
      validation: {
        title: 'インテリジェントバリデーションレイヤー',
        description: [
          'データバリデーションを専用のフォームオブジェクトに移動することで、より論理的なアプローチを採用します。この分離により、データバリデーションとビジネスロジックの間に明確な境界が作られます。',
          'フォームオブジェクトは、データの型変換、バリデーションルール、およびビジネス操作が開始される前のデータの整合性を確保します。この事前バリデーション戦略により、無効なデータがコアビジネスロジックに到達するのを防ぎ、エラーを減少させ、システムの信頼性を向上させます。'
        ]
      },
      operation: {
        title: 'オーケストレーテッドビジネスロジック',
        description: [
          'オペレーションは、アプリケーションの交響曲の指揮者として機能し、複雑なビジネスプロセスを明確さと精度を持って調整します。',
          '各オペレーションは特定のビジネスワークフローをカプセル化し、それを明確な順序のステップに分解します。この構造化されたアプローチにより、コードの可読性が向上し、テストが容易になり、複雑なビジネスプロセスがより管理しやすくなります。オペレーションはコードの再利用を促進し、アプリケーションのビジネスロジックをより保守可能でスケーラブルにします。'
        ]
      }
    }
  },
  common: {
    loading: '読み込み中...',
    error: 'エラーが発生しました',
    backToTop: 'トップへ戻る'
  },
  footer: {
    copyright: '著作権 © 2017 - {year} HMVC',
    developedBy: 'Ruby チームによって開発 <a href="https://tomosia.com" target="_blank" class="text-decoration-none">TOMOSIA VIETNAM</a>'
  }
}
